# Generated by Django 4.1.2 on 2022-10-20 15:21

from django.db import migrations, models
import django.db.models.deletion
import timescale.db.models.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='EvaluationMesspunkt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time', models.DateTimeField()),
                ('lafeq', models.FloatField()),
                ('rejected', models.FloatField(null=True)),
                ('detected', models.FloatField(null=True)),
            ],
            options={
                'db_table': 'tsdb_evaluationmesspunkt',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Auswertungslauf',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('zeitpunkt_im_beurteilungszeitraum', models.DateTimeField()),
                ('zeitpunkt_durchfuehrung', models.DateTimeField()),
                ('verhandene_messwerte', models.IntegerField()),
                ('verwertebare_messwerte', models.IntegerField()),
                ('in_berechnung_gewertete_messwerte', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='Detection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='Immissionsort',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('grenzwert_tag', models.FloatField(default=0.0)),
                ('grenzwert_nacht', models.FloatField(default=0.0)),
                ('gk_rechts', models.FloatField(default=0.0)),
                ('gk_hoch', models.FloatField(default=0.0)),
                ('name_4_excel', models.CharField(max_length=32)),
                ('id_external', models.IntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='LaermursacheAnImmissionsorten',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='Messpunkt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('gk_rechts', models.FloatField(default=0.0)),
                ('gk_hoch', models.FloatField(default=0.0)),
                ('is_meteo_station', models.BooleanField(default=False)),
                ('id_external', models.IntegerField(default=0)),
                ('upload_folder_svantek_file', models.CharField(blank=True, max_length=200, null=True)),
                ('ablage_folder_transmes', models.CharField(blank=True, max_length=200, null=True)),
                ('lwa', models.FloatField(default=0.0)),
            ],
        ),
        migrations.CreateModel(
            name='Projekt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='Rejection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='Terz',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time', timescale.db.models.fields.TimescaleDateTimeField(interval='1 day')),
                ('hz20', models.FloatField(default=0.0)),
                ('hz25', models.FloatField(default=0.0)),
                ('hz31_5', models.FloatField(default=0.0)),
                ('hz40', models.FloatField(default=0.0)),
                ('hz50', models.FloatField(default=0.0)),
                ('hz63', models.FloatField(default=0.0)),
                ('hz80', models.FloatField(default=0.0)),
                ('hz100', models.FloatField(default=0.0)),
                ('hz125', models.FloatField(default=0.0)),
                ('hz160', models.FloatField(default=0.0)),
                ('hz200', models.FloatField(default=0.0)),
                ('hz250', models.FloatField(default=0.0)),
                ('hz315', models.FloatField(default=0.0)),
                ('hz400', models.FloatField(default=0.0)),
                ('hz500', models.FloatField(default=0.0)),
                ('hz630', models.FloatField(default=0.0)),
                ('hz800', models.FloatField(default=0.0)),
                ('hz1000', models.FloatField(default=0.0)),
                ('hz1250', models.FloatField(default=0.0)),
                ('hz1600', models.FloatField(default=0.0)),
                ('hz2000', models.FloatField(default=0.0)),
                ('hz2500', models.FloatField(default=0.0)),
                ('hz3150', models.FloatField(default=0.0)),
                ('hz4000', models.FloatField(default=0.0)),
                ('hz5000', models.FloatField(default=0.0)),
                ('hz6300', models.FloatField(default=0.0)),
                ('hz8000', models.FloatField(default=0.0)),
                ('hz10000', models.FloatField(default=0.0)),
                ('hz12500', models.FloatField(default=0.0)),
                ('hz16000', models.FloatField(default=0.0)),
                ('hz20000', models.FloatField(default=0.0)),
                ('messpunkt', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tsdb.messpunkt')),
            ],
        ),
        migrations.CreateModel(
            name='SchallleistungPegel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time', timescale.db.models.fields.TimescaleDateTimeField(interval='1 day')),
                ('pegel', models.FloatField()),
                ('berechnet_von', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='tsdb.auswertungslauf')),
                ('messpunkt', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='tsdb.messpunkt')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Resu',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time', timescale.db.models.fields.TimescaleDateTimeField(interval='1 day')),
                ('lafeq', models.FloatField(default=0.0)),
                ('lcfeq', models.FloatField(default=0.0)),
                ('lafmax', models.FloatField(default=0.0)),
                ('messpunkt', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tsdb.messpunkt')),
            ],
        ),
        migrations.CreateModel(
            name='Rejected',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time', timescale.db.models.fields.TimescaleDateTimeField(interval='1 day')),
                ('berechnet_von', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='tsdb.auswertungslauf')),
                ('filter', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='tsdb.rejection')),
                ('messpunkt', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='tsdb.messpunkt')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Mete',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time', timescale.db.models.fields.TimescaleDateTimeField(interval='1 day')),
                ('rain', models.FloatField(default=0.0)),
                ('temperature', models.FloatField(default=0.0)),
                ('windspeed', models.FloatField(default=0.0)),
                ('pressure', models.FloatField(default=0.0)),
                ('humidity', models.FloatField(default=0.0)),
                ('winddirection', models.FloatField(default=0.0)),
                ('messpunkt', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='tsdb.messpunkt')),
            ],
        ),
        migrations.AddField(
            model_name='messpunkt',
            name='projekt',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tsdb.projekt'),
        ),
        migrations.CreateModel(
            name='MaxPegel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time', timescale.db.models.fields.TimescaleDateTimeField(interval='1 day')),
                ('pegel', models.FloatField()),
                ('berechnet_von', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='tsdb.auswertungslauf')),
                ('immissionsort', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='tsdb.immissionsort')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='LrPegel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time', timescale.db.models.fields.TimescaleDateTimeField(interval='1 day')),
                ('pegel', models.FloatField()),
                ('berechnet_von', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='tsdb.auswertungslauf')),
                ('immissionsort', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='tsdb.immissionsort')),
                ('verursacht', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='tsdb.laermursacheanimmissionsorten')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='LaermursacheAnMesspunkt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('gemessen_an', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='tsdb.messpunkt')),
            ],
        ),
        migrations.AddField(
            model_name='laermursacheanimmissionsorten',
            name='projekt',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='tsdb.projekt'),
        ),
        migrations.AddField(
            model_name='immissionsort',
            name='projekt',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tsdb.projekt'),
        ),
        migrations.CreateModel(
            name='Detected',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time', timescale.db.models.fields.TimescaleDateTimeField(interval='1 day')),
                ('dauer', models.FloatField()),
                ('berechnet_von', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='tsdb.auswertungslauf')),
                ('messpunkt', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='tsdb.messpunkt')),
                ('typ', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='tsdb.detection')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='auswertungslauf',
            name='zuordnung',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tsdb.projekt'),
        ),
        migrations.CreateModel(
            name='Ausbreitstungsfaktor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ausbreitungskorrektur', models.FloatField(default=0.0)),
                ('immissionsort', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='tsdb.immissionsort')),
                ('messpunkt', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='tsdb.messpunkt')),
            ],
        ),
        migrations.AddIndex(
            model_name='terz',
            index=models.Index(fields=['time', 'messpunkt'], name='terz_time_messpunkt_idx'),
        ),
        migrations.AddIndex(
            model_name='resu',
            index=models.Index(fields=['time', 'messpunkt'], name='resu_time_messpunkt_idx'),
        ),
        migrations.AddIndex(
            model_name='mete',
            index=models.Index(fields=['time', 'messpunkt'], name='mete_time_messpunkt_idx'),
        ),

    ]

migrations.RunSQL(
            """
ALTER TABLE tsdb_lrpegel
drop CONSTRAINT tsdb_lrpegel_berechnet_von_id_fb69287e_fk_tsdb_ausw;

ALTER TABLE tsdb_lrpegel
ADD CONSTRAINT tsdb_lrpegel_berechnet_von_id_fb69287e_fk_tsdb_ausw
    FOREIGN KEY ("berechnet_von_id")
    REFERENCES tsdb_auswertungslauf
        ("id")
    ON DELETE CASCADE ON UPDATE NO ACTION;

    """
        )

